(function(App) {
  App.RtcAdapter = function(opts) {
    var self = this;

    self.onReceive = opts['onReceive'];

    self.savePeerId = function(id, opts) {
      $.ajax({
        type: 'PUT',
        dataType: 'JSON',
        url: '/api/channels/' + opts.channel,
        data: {
          id: opts.channel,
          channel: {
            peer_id: id
          }
        },

        success: function(xhr) {
          console.log('Saved channel source peer_id');
          opts.peer_id = xhr.channel.peer_id;
        },

        error: function(xhr) {
          console.log('Error');
          console.log(xhr);
        }
      });
    }

    self.establishConnection = function(opts) {
      var dfd = $.Deferred();
      var peer_opts = {
        host: '<%= ENV["PEER_SERVER_HOST"] %>',
        secure: true,
        port: 443,
        path: '/'
      };

      if (opts.owner && opts.peer_id)
        self.peer = window.peer = new Peer(opts.peer_id, peer_opts);
      else {
        self.peer = window.peer = new Peer(peer_opts);

        self.peer.on('open', (function(id) {
          console.log('My peer ID is: ' + id);

          if (opts.owner)
            self.savePeerId(id, opts);
          else {
            self.conn = window.peer.connect(opts.peer_id);
            dfd.resolve();
            self.conn.send('Connection with ' + opts.peer_id + ' from ' + id + ' successful!');
          }
        }).bind(this));
      }

      self.peer.on('connection', (function(data) {
        self.conn = data;
        console.log('connection');
        dfd.resolve();
      }).bind(this));

      return dfd.promise();
    }

    self.set = function(prop, val) {
      self[prop] = val;

      if (self.conn && prop == 'onReceive')
        self.conn.on('data', self.onReceive);
    }

    self.send = function(opts) {
      console.log('sending');
      console.log(opts);
      if (self.conn) self.conn.send(opts);
      else console.log('No connection to send to');
    }

    self.establishConnection(opts).done((function() {
      if (self.conn) self.conn.on('data', self.onReceive);
    }).bind(this));

    return self;
  }

  return App;
})(App || {});
