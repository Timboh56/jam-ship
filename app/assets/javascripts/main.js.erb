window.initialize = function(opts) {
  console.log(opts.connections);
  opts = $.extend({}, opts, {
    onReceiveFirebase: function(snapshot) {
      var snapVal, template;
      snapVal = snapshot.val();
      if(snapVal && snapVal.message && snapVal.name) {
        template = App.Helpers.renderTemplate('.message-template', snapVal);
        $('.messages-container').append(template);
      }
    },

    onConnect: function() {
      window.FirebaseInterface.broadcast({
        message: 'Joined room.',
        name: $("#current-user-name").val() || 'Guest'
      });
    }
  });

  window.RtcAdapter = App.RtcAdapter(opts);
  window.FirebaseInterface = App.FirebaseAdapter(opts);

  $(document).on('click', '.js-toggle', function() {
    var toggleClass = $(this).data('toggle-class');
    var target = $(this).data('target');
    $(target).toggleClass(toggleClass);
  });

  var synth = new App.Synth({
    channel: opts.channel,
    clips: opts.clips,

    onTick: function(i) {
      if (!$('.t2').hasClass('active')) $('.t2').addClass('active');
      if (i > 0)
        $('.recording-status').html('recording in ' + i + '</br > (R to skip)');
      else
        $('.recording-status').html('');
    },

    onCreateBuffer: function(id) {
      var recordTrackCount = $('.recording-track').length + 1,
        opts = {
          'id' : id,
          'count' : recordTrackCount
        },
        rowHtml = App.Helpers.renderTemplate('.record-row-template', opts);

      $('.recording-status').html('');
      $('.recordings-container').append(rowHtml);
    },

    onDeleteBuffer: function(id) {
      $('#recording-track-container-' + id).remove();
    },

    onPlay: function(opts) {
      var note = opts['note'],
        velocity = opts['velocity'],
        receiving = opts['receiving'];
        keyId = note.replace('#', 'sharp');
      receiving = receiving || false;

      $("#" + keyId).addClass('active');
      if (synth.mode.value == 'live' && !receiving) window.RtcAdapter.send({ note: note, velocity: velocity });
    },

    onStop: function(opts) {
      var note = opts['note'],
        receiving = opts['receiving'];
        keyId = note.replace('#', 'sharp');

      $("#" + keyId).removeClass('active');
      if (synth.mode.value == 'live' && !receiving) window.RtcAdapter.send({ note: note, velocity: 0 });
    },

    onStartRecording: function(val) {
      var icon = App.Helpers.renderFA('fa-circle red-text');
      $('.recording-status').html('');
      $('.recording-status').append(icon).append(' recording..').append('<br />').append('(R to stop)');
    },

    onStopRecording: function(val) {
      if ($('.t2').hasClass('active')) $('.t2').removeClass('active');
      $('#play-btn-' + val.id).removeClass('focus');
    },

    onPlayRecording: function(val) {
      $('#play-btn-' + val.id).addClass('focus');
    },


    onSaveBuffer: function(opts) {
      var icon = $('<i />').addClass('fa fa-cloud-upload');
      $('#upload-clip-' + opts.id).html(icon);
    },

    inputFieldsClass: 'synth-field'
  });

  $(document).on('click', '.js-record-action', function(el) {
    var self = $(this),
      recordId = self.data('record-id'),
      action = self.data('action');

      if (action == 'startRecording' || action == 'stopRecording') {
        synth.Sequencer[action].call(this, {
          recordId: recordId,
          instrument: synth.getCurrentInstrument()
        });
      } else
        synth.Sequencer[action].call(this, recordId);
  });

  var chatRoom = new App.Chatroom({
    firebaseAdapter: window.FirebaseInterface,
    messageFieldSelector: '#message-text-field',
    chatFormSelector: 'form#chat-room-form',
    onFocus: synth.disableKeyboard.bind(this),
    onBlur: synth.enableKeyboard.bind(this),
  });

  $('textarea, input[type=text]').on('focus', synth.disableKeyboard.bind(this));
  $('textarea, input[type=text]').on('blur', synth.enableKeyboard.bind(this));

  $(document).on('change', 'input[type=checkbox].toggle, select.toggle', function(i, el) {
    var el = $(this),
      targetClass = el.data('target'),
      toggleClass = el.data('toggle-class'),
      val = el.val();
    $('.' + targetClass).toggleClass(toggleClass);
  });

  $('form.edit_channel').on('ajax:success', function() {
    var rowHtml = App.Helpers.renderTemplate('.alert-info-template', {
      message: 'Saved!'
    });
    $('#edit-channel-modal').modal('hide');
    $('.flash-messages').html(rowHtml);
  });

  $('.knob').each(function(el) {
    var self = $(this),
        id = self.attr('id'),
        min = parseFloat(self.data('min')),
        max = parseFloat(self.data('max')),
        dataType = self.data('type'),
        stepData = parseFloat(self.data('step')),
        step = stepData || (max < 1.01 ? 0.01 : 0.5),
        synthField = self.data('synthField');
      
    $('#' + id).knobKnob({
      snap : 10,
      value: 1,
      turn : function(ratio) {

        // need to multiply ratio by target.data('max')
        var def = parseFloat($('#' + id).data('default')),
          min = parseFloat($('#' + id).data('min')),
          max = parseFloat($('#' + id).data('max')),
          val = min + (ratio * (max - min));

        $('#' + id).val(val);
        synth.InstrumentControl.onChangeInput($('#' + id));
      }
    });
  });

  $('.like-btn').on('click', function(e) {
    $.ajax({
      type: 'GET',
      dataType: 'json',
      data: { id: opts.channel },
      url: '/api/channels/like',
      success: function(response) {
        var rowHtml = App.Helpers.renderTemplate('.alert-info-template', {
          message: 'Liked!'
        });
        $('.like-count').html(response.like_count);
        $('.like-btn').toggleClass('selected');
      }
    });
  });

  $('.dislike-btn').on('click', function(e) {
    $.ajax({
      type: 'GET',
      dataType: 'json',
      data: { id: opts.channel },
      url: '/api/channels/dislike',
      success: function(response) {
        var rowHtml = App.Helpers.renderTemplate('.alert-info-template', {
          message: 'Disliked!'
        });
        $('.like-count').html(response.like_count);
        $('.like-btn').toggleClass('selected');
      }
    });
  });
};