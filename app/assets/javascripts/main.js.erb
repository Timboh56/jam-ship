window.myDataRef = new Firebase('https://jam-ship.firebaseio.com/');

window.initialize = function(opts) {

  opts = $.extend({}, opts, {
    onReceive: function(snapshot) {
      var snapVal = snapshot.val();
      var template = App.Helpers.renderTemplate('.message-template', snapVal);
      $('.messages-container').append(template);

    }
  });

  window.RtcAdapter = App.RtcAdapter(opts);
  window.FirebaseInterface = App.FirebaseAdapter(opts);

  $(document).on('click', '.js-toggle', function() {
    var toggleClass = $(this).data('toggle-class');
    var target = $(this).data('target');
    $(target).toggleClass(toggleClass);
  });

  var synth = new App.Synth({
    channel: opts.channel,
    clips: opts.clips,

    onTick: function(i) {
      if (i > 0)
        $('.recording-status').html('recording in ' + i + ' (R to skip)');
      else
        $('.recording-status').html('');
    },

    onCreateBuffer: function(id) {
      var recordTrackCount = $('.recording-track').length + 1,
        opts = {
          'id' : id,
          'count' : recordTrackCount
        },
        rowHtml = App.Helpers.renderTemplate('.record-row-template', opts);

      $('.recording-status').html('');
      $('.recordings-container').append(rowHtml);
    },

    onDeleteBuffer: function(id) {
      $('#recording-track-container-' + id).remove();
    },

    onPlay: function(opts) {
      var note = opts['note'],
        velocity = opts['velocity'],
        receiving = opts['receiving'];

      receiving = receiving || false;
      note = note.replace('#', 'sharp');
      $("#" + note).addClass('active');
      if (synth.mode == 'live' && !receiving) window.RtcAdapter.send({ note: note, velocity: velocity });
    },

    onStop: function(opts) {
      var note = opts['note'],
        receiving = opts['receiving'];

      note = note.replace('#', 'sharp');
      $("#" + note).removeClass('active');
      if (synth.mode == 'live' && !receiving) window.RtcAdapter.send({ note: note, velocity: 0 });
    },

    onStartRecording: function(val) {
      var icon = App.Helpers.renderFA('fa-circle red-text');
      $('.recording-status').html('');
      $('.recording-status').append(icon).append(' recording.. (R to stop)');
    },

    onStopRecording: function(val) {
      $('#play-btn-' + val.id).removeClass('focus');
    },

    onPlayRecording: function(val) {
      $('#play-btn-' + val.id).addClass('focus');
    },


    onSaveBuffer: function(opts) {
      var icon = $('<i />').addClass('fa fa-cloud-upload');
      $('#upload-clip-' + opts.id).html(icon);
    },

    inputFieldsClass: 'synth-field'
  });

  $(document).on('click', '.js-record-action', function(el) {
    var self = $(this),
      recordId = self.data('record-id'),
      action = self.data('action');

      if (action == 'startRecording' || action == 'stopRecording') {
        synth.Sequencer[action].call(this, {
          recordId: recordId,
          instrument: synth.getCurrentInstrument()
        });
      } else
        synth.Sequencer[action].call(this, recordId);
  });

  var chatSubmit = function(e) {
    var val = $('#message-text-field').val();
  
    if (val.replace(' ', '') != '') {
      val['align'] = 'text-right';
      window.FirebaseInterface.broadcast({
        message: val,
        name: $("#current-user-name").val() || 'No name'
      });
      $('#message-text-field').val('');

      m = $('#messages-container');
      m.scrollTop(m[0].scrollHeight);
    }

    e.preventDefault();    
  };

  $('#message-text-field').on('focus', function(){
    synth.disableKeyboard();
  });

  $('#message-text-field').on('blur', function(){
    synth.enableKeyboard();
  });

  $('form#chat-room-form').find('#message-text-field').on('keypress', function(e) {
    if (e.keyCode == 13) chatSubmit(e);
  });

  $('form#chat-room-form').on('submit', function(e) {
    chatSubmit(e);
  });

  $(document).on('change', 'input[type=checkbox].toggle, select.toggle', function(i, el) {
    var el = $(this),
      targetClass = el.data('target'),
      toggleClass = el.data('toggle-class'),
      val = el.val();
    $('.' + targetClass).toggleClass(toggleClass);
  });


  $('.knob').each(function(el) {
    var self = $(this),
        id = self.attr('id'),
        min = parseFloat(self.data('min')),
        max = parseFloat(self.data('max')),
        dataType = self.data('type'),
        stepData = parseFloat(self.data('step')),
        step = stepData || (max < 1.01 ? 0.01 : 0.5),
        synthField = self.data('synthField');
      
    $('#' + id).knobKnob({
      snap : 10,
      value: 1,
      turn : function(ratio) {

        // need to multiply ratio by target.data('max')
        var def = parseFloat($('#' + id).data('default'));
        var min = parseFloat($('#' + id).data('min'));
        var max = parseFloat($('#' + id).data('max'));
        var val = min + (ratio * (max - min));
        $('#' + id).val(val);
        synth.InstrumentControl.onChangeInput($('#' + id));
      }
    });
  });
};